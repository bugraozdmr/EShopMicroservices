version: '3.8'

#docker compose down && docker compose -p microservices up
#sudo docker-compose down -v && sudo docker-compose -p microservices up --build
 
services:
  catalogdb:
    image: postgres
    container_name: catalogdb
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: CatalogDb
    restart: always
    ports:
      - "5434:5432"
    volumes:
      - postgres_catalog:/var/lib/postgresql/data
  
  basketdb:
    image: postgres
    container_name: basketdb
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: BasketDb
    restart: always
    ports:
      # aynı portu acamazsın
      - "5435:5432"
    volumes:
      - postgres_basket:/var/lib/postgresql/data

  distributedcache:
    image: redis
    container_name: redis_cache
    restart: always
    ports:
      - "6378:6379"

  orderdb:
    image: mcr.microsoft.com/mssql/server
    #image: mcr.microsoft.com/azure-sql-edge calismadi- amd64 digeri
    container_name: orderdb
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "SwN12345678"
    restart: always
    ports:
      - "1433:1433"
    volumes:
      - orderdb_data:/var/opt/mssql # Veritabanı verilerini kalıcı hale getirmek için
      
  messagebroker:
    image: rabbitmq:management
    container_name: messagebroker
    hostname: microservices
    environment:
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
      # http istekleri için genel olarak 15672 bu olmazsa managemnet'a bağlanamazsın

  catalog.api:
    build:
      context: .
      dockerfile: Services/Catalog/Catalog.API/Dockerfile
    container_name: catalog.api
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_HTTP_PORTS: 8080
      #ASPNETCORE_HTTPS_PORTS: 8081
      ## neden 5432 ?
      ConnectionStrings__Database: "Server=catalogdb;Port=5432;Database=CatalogDb;User Id=postgres;Password=postgres"
    depends_on:
      - catalogdb
    ports:
      - "6000:8080"
      #- "6060:8081"
    #volumes:
      #- /Users/bugra/.aspnet/dev-certs/https:/https
      
  basket.api:
    build:
      context: .
      dockerfile: Services/Basket/Basket.API/Dockerfile
    container_name: basket.api
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_HTTP_PORTS: 8080
      ConnectionStrings__Database: "Server=basketdb;Port=5432;Database=BasketDb;User Id=postgres;Password=postgres"
      ConnectionStrings__Redis: "distributedcache:6379"
      GrpcSettings__DiscountUrl: "http://discount.grpc:8080"
      MessageBroker__Host: "amqp://microservices:5672"
      MessageBroker__Username: "guest"
      MessageBroker__Password: "guest"
    depends_on:
      - basketdb
      - distributedcache
      - discount.grpc
      - messagebroker
    ports:
      - "6001:8080"
  
  discount.grpc:
    build:
      context: .
      dockerfile: Services/Discount/Discount.Grpc/Dockerfile
    container_name: discount.grpc
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_HTTP_PORTS: 8080
      ConnectionStrings__Database: "Data Source=discountdb"
    ports:
      - "6002:8080"
        
  ordering.api:
    build:
      context: .
      dockerfile: Services/Ordering/Ordering.API/Dockerfile
    container_name: ordering.api
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_HTTP_PORTS: 8080
      ConnectionStrings__Database: "Server=orderdb;Database=OrderDb;User Id=sa;Password=SwN12345678;Encrypt=False;TrustServerCertificate=True"
      MessageBroker__Host: "amqp://microservices:5672"
      MessageBroker__Username: "guest"
      MessageBroker__Password: "guest"
      FeatureManagement__OrderFulfilment: false
    ports:
      - "6003:8080"

volumes:
  postgres_catalog:
  postgres_basket:
  orderdb_data: